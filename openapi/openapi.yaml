openapi: 3.0.0
info:
  title: Greeting API
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://example.com
paths:
  /v1/users:
    get:
      description: Get all users
      summary: get users
      operationId: getUsers
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
  /v1/users/{user_id}:
    get:
      description: Get user by id
      summary: get user by id
      operationId: getUserById
      security: []
      parameters:
        - name: user_id
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /v1/employees/{employee_id}:
    get:
      description: Get all employees
      summary: get employees
      operationId: getEmployees
      security: []
      parameters:
        - name: employee_id
          in: path
          description: ID of employee to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Member'
                  - $ref: '#/components/schemas/Manager'

        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        age:
          type: integer
          format: int32
          nullable: true
      required:
        - id
        - name
        - email
    Users:
      type: array
      items:
        $ref: '#/components/schemas/User'
    Member:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        department:
          type: string
        team:
          type: string
      required:
        - id
        - name
        - email
        - department
        - team
    Manager:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        department:
          type: string
        teams:
          type: array
          items:
            type: string
      required:
        - id
        - name
        - email
        - department
        - teams