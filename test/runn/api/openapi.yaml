openapi: 3.0.0
info:
  title: Greeting API
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://example.com
paths:
  /v1/heavy:
    get:
      description: Get a heavy response
      summary: get heavy
      operationId: getHeavy
      security: []
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
  /v1/users:
    get:
      description: Get all users
      summary: get users
      operationId: getUsers
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
    post:
      description: Create a new user
      summary: create user
      operationId: createUser
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
  /v1/users/{user_id}:
    get:
      description: Get user by id
      summary: get user by id
      operationId: getUserById
      security: []
      parameters:
        - name: user_id
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /v1/reports:
    get:
      description: Get all reports
      summary: get reports
      operationId: getReports
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reports'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
    post:
      description: Create a new report
      summary: create report
      operationId: createReport
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReport'
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
  /v1/reports/{report_id}:
    get:
      description: Get report by id
      summary: get report by id
      operationId: getReportById
      security: []
      parameters:
        - name: report_id
          in: path
          description: ID of report to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
components:
  schemas:
    CreateUser:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - id
        - name
    Users:
      type: array
      items:
        $ref: '#/components/schemas/User'
    CreateReport:
      type: object
      properties:
        user_id:
          type: string
        category:
          type: string
          enum:
            - issue
            - research
            - investigation
        title:
          type: string
        content:
          type: string
      required:
        - user_id
        - category
        - title
        - content
    Report:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        category:
          type: string
        title:
          type: string
        content:
          type: string
      required:
        - id
        - user_id
        - category
        - title
        - content
    Reports:
      type: array
      items:
        $ref: '#/components/schemas/Report'
